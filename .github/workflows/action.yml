# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven

name: CI with Maven

on: [ push ]

jobs:
  build_deploy:
    runs-on: ubuntu-latest
    environment:
      name: maven
    env:
      SETUP_JAVA_VERSION: '8'
      SETUP_JAVA_DISTRIBUTION: adopt

    steps:
    - uses: actions/checkout@v2
    - name: Set up JDK
      uses: actions/setup-java@v2
      with:
        java-version: ${{ env.SETUP_JAVA_VERSION }}
        distribution: ${{ env.SETUP_JAVA_DISTRIBUTION }}
        cache: maven
    - name: Build with Maven
      run: mvn -B package

    - name: Set up Apache Maven Central
      uses: actions/setup-java@v2
      with: # running setup-java again overwrites the settings.xml
        java-version: ${{ env.SETUP_JAVA_VERSION }}
        distribution: ${{ env.SETUP_JAVA_DISTRIBUTION }}
        cache: maven
        server-id: ossrh # Value of the distributionManagement/repository/id field of the pom.xml
        server-username: MAVEN_USERNAME # env variable name for username in deploy
        server-password: MAVEN_CENTRAL_TOKEN # env variable name for token in deploy
        gpg-private-key: ${{ secrets.MAVEN_GPG_PRIVATE_KEY }} # Value of the GPG private key to import
        gpg-passphrase: MAVEN_GPG_PASSPHRASE # env variable name for GPG private key passphrase

    - name: Publish snapshot version to Apache Maven Central
      if: ${{ github.ref == 'refs/heads/master' }}
      run: mvn -B source:jar deploy -DskipTests=true -P publishing
      env:
        MAVEN_USERNAME: ${{ secrets.MAVEN_USERNAME }}
        MAVEN_CENTRAL_TOKEN: ${{ secrets.MAVEN_CENTRAL_TOKEN }}
        MAVEN_GPG_PASSPHRASE: ${{ secrets.MAVEN_GPG_PASSPHRASE }}

    - name: Publish release version to Apache Maven Central
      if: startsWith( github.ref, 'refs/tags/' )
      run: |
        VERSION=${GITHUB_REF##*/}
        echo -e "[INFO] on a tag -> set pom.xml <version> to ${VERSION}"
        mvn -B versions:set -DnewVersion=${VERSION}
        mvn -B source:jar deploy -DskipTests=true -P publishing
      env:
        MAVEN_USERNAME: ${{ secrets.MAVEN_USERNAME }}
        MAVEN_CENTRAL_TOKEN: ${{ secrets.MAVEN_CENTRAL_TOKEN }}
        MAVEN_GPG_PASSPHRASE: ${{ secrets.MAVEN_GPG_PASSPHRASE }}
